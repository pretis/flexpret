
# FLEXPRET_ROOT_DIR, NAME, and APP_SOURCES must be defined in the Makefile that this is included from

ifndef FLEXPRET_ROOT_DIR
$(error FLEXPRET_ROOT_DIR is not set)
endif

ifndef NAME
$(error NAME (name of program) is not set)
endif

ifndef APP_SOURCES
$(error APP_SOURCES is not set)
endif

all: compile

# Include specification for how to build libflexpret
include $(FLEXPRET_ROOT_DIR)/swconfig.mk
include $(FLEXPRET_ROOT_DIR)/programs/lib/Makefrag-lib

ifeq ($(TARGET),emulator)
LINKER_SCRIPT ?= $(FP_LIB_DIR)/linker/flexpret.ld
else
LINKER_SCRIPT ?= $(FP_LIB_DIR)/linker/flexpret_app.ld
endif

RISCV_PREFIX = riscv32-unknown-elf-
CC = $(RISCV_PREFIX)gcc
AR = $(RISCV_PREFIX)ar
OBJDUMP := $(RISCV_PREFIX)objdump
OBJCOPY := $(RISCV_PREFIX)objcopy
EMU ?= $(FLEXPRET_ROOT_DIR)/emulator/fp-emu # Verilator C++ emulator

CFLAGS += -g -static -O0 -march=rv32i -mabi=ilp32 -nostartfiles --specs=nosys.specs -Werror=stack-usage=$(STACKSIZE) $(APP_DEFS) $(DEFINES)
INCS += $(LIB_INCS) $(APP_INCS)
LFLAGS += -T $(LINKER_SCRIPT) -L $(FP_LIB_DIR)/linker -Xlinker -Map=$(NAME).map 

ifeq ($(WANT_DEBUG),true)
CFLAGS += -fstack-protector-all
endif

.PHONY: compile riscv dump mem run clean recompile

# Default target; generates the riscv, dump, and mem files
# Double colon makes it possible to extend the target
compile:: autogen riscv dump mem

autogen: $(LIB_AUTOGEN)

# Compiles a C program into a riscv ELF file.
riscv: $(NAME).riscv

%.riscv: $(STARTUP_SOURCES) $(APP_SOURCES) $(LIB_SOURCES)
	$(CC) $(LFLAGS) $(CFLAGS) $(INCS) -o $*.riscv $^

# Generates a dump file for debugging
dump: $(NAME).dump
%.dump: %.riscv
	@$(OBJDUMP) -S -d $^ > $@

# Generates the .mem file, that can be run with fp-emu
mem: $(NAME).mem
%.mem: %.riscv
	@$(OBJCOPY) -O binary $*.riscv $*.binary.txt
	@xxd -c 4 -e $*.binary.txt | cut -c11-18 > $*.mem
	@xxd -c 4 -e $*.binary.txt > $*.mem.orig
	@rm $*.binary.txt # Delete the temporary binary file

# runs the program (generated .mem file) using fp-emu 
run: $(NAME).mem $(CLIENT)
ifeq ($(CLIENT_CMD),)
	@$(EMU) +ispm=$^
else
	@$(CLIENT_CMD) &
	@$(EMU) +ispm=$^ --client
	@wait
	@killall $(CLIENT)
endif

WARNING = \033[0;33mEnsure $(NAME).mem was compiled with TARGET=fpga, otherwise it will immediately crash\e[0m
USB_PATH ?= /dev/ttyUSB0
FPGA_FLASH_BAUDRATE ?= 115200

flash: $(NAME).mem
	@echo -e "$(WARNING)"
	@python3 $(FLEXPRET_ROOT_DIR)/scripts/serialize_app.py $< $<.serialized
	@python3 $(FLEXPRET_ROOT_DIR)/scripts/send_uart.py $(USB_PATH) $(FPGA_FLASH_BAUDRATE) $<.serialized

# Clean and recompile
recompile: clean compile

# Deletes all generated artifacts
# Double colon makes it possible to extend the target
clean::
	rm -f *.vcd *.mem *.riscv *.map *.out *.dump *.orig *.a *.app
	rm -f $(LIB_AUTOGEN)
