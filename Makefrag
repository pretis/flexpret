
# FLEXPRET_ROOT_DIR, NAME, and APP_SOURCES must be defined in the Makefile that this is included from

ifndef FLEXPRET_ROOT_DIR
$(error FLEXPRET_ROOT_DIR is not set)
endif

ifndef NAME
$(error NAME (name of program) is not set)
endif

ifndef APP_SOURCES
$(error APP_SOURCES is not set)
endif

all: compile

# Include specification for how to build libflexpret
include $(FLEXPRET_ROOT_DIR)/swconfig.mk
include $(FLEXPRET_ROOT_DIR)/programs/lib/Makefrag-lib

LINKER_SCRIPT ?= $(FP_LIB_DIR)/linker/flexpret.ld
RISCV_PREFIX = riscv32-unknown-elf-
CC = $(RISCV_PREFIX)gcc
AR = $(RISCV_PREFIX)ar
OBJDUMP := $(RISCV_PREFIX)objdump
OBJCOPY := $(RISCV_PREFIX)objcopy
EMU ?= $(FLEXPRET_ROOT_DIR)/emulator/fp-emu # Verilator C++ emulator

RISCV_INSTALL := $(subst /$(CC),,$(shell which $(CC)))
NEWLIB_PATH := $(RISCV_INSTALL)/../lib/gcc/riscv32-unknown-elf/11.1.0/../../../../riscv32-unknown-elf/lib/libc.a

CFLAGS += -g -static -O0 -march=rv32i -mabi=ilp32 -nostartfiles --specs=nosys.specs -Werror=stack-usage=$(STACKSIZE) $(APP_DEFS) $(DEFINES)
INCS += $(LIB_INCS) $(APP_INCS)
LFLAGS += -T $(LINKER_SCRIPT) -L $(FP_LIB_DIR)/linker -Xlinker -Map=$(NAME).map 
LIB_SOURCES += $(FLEXPRET_ROOT_DIR)/libc.a.weakened

ifeq ($(WANT_DEBUG),true)
CFLAGS += -fstack-protector-all
endif

.PHONY: compile riscv dump mem run clean recompile

# Default target; generates the riscv, dump, and mem files
compile: autogen riscv dump mem

autogen: $(LIB_AUTOGEN)

# See programs/lib/linker/newlib-weaken.txt for explanation
%.weakened: $(NEWLIB_PATH)
	$(OBJCOPY) --weaken-symbols $(FP_LIB_DIR)/linker/newlib-weaken.txt $^ $@

# Compiles a C program into a riscv ELF file.
riscv: $(NAME).riscv

%.riscv: $(STARTUP_SOURCES) $(APP_SOURCES) $(LIB_SOURCES)
	$(CC) $(LFLAGS) $(CFLAGS) $(INCS) -o $*.riscv $^

# Generates a dump file for debugging
dump: $(NAME).dump
%.dump: %.riscv
	@$(OBJDUMP) -S -d $^ > $@

# Generates the .mem file, that can be run with fp-emu
mem: $(NAME).mem
%.mem: %.riscv
	@$(OBJCOPY) -O binary $*.riscv $*.binary.txt
	@xxd -c 4 -e $*.binary.txt | cut -c11-18 > $*.mem
	@xxd -c 4 -e $*.binary.txt > $*.mem.orig
	@rm $*.binary.txt # Delete the temporary binary file

# runs the program (generated .mem file) using fp-emu 
run: $(NAME).mem
	@$(EMU) +ispm=$^;

# Clean and recompile
recompile: clean compile

# deletes all generated artifacts
clean:
	rm -f *.vcd *.mem *.riscv *.map *.out *.dump *.orig *.a *.app
	rm -f $(LIB_AUTOGEN)
