trigger:
- master

pool:
  vmImage: 'ubuntu-20.04'

steps:
# Azure Pipelines has a weird bug where running tests from a fresh install
# will cause the following error, which goes away upon running mill again.
# We work around it by running the tests twice (!!!)
# flexpret.test.compileClasspath java.util.NoSuchElementException: key not found: https://oss.sonatype.org/content/repositories/releases/com/lihaoyi/utest_2.12/maven-metadata.xml
- script: |
    # Ubuntu 20.04 only has Verilator 4.028 but we neeed a more modern version
    # so we do not use 'sudo apt-get install -y -qq verilator' here.
    wget -q https://github.com/sifive/verilator/releases/download/4.036-0sifive2/verilator_4.036-0sifive2_amd64.deb -O verilator.deb
    sudo dpkg -i verilator.deb
    wget -q https://github.com/xpack-dev-tools/riscv-none-embed-gcc-xpack/releases/download/v8.3.0-2.3/xpack-riscv-none-embed-gcc-8.3.0-2.3-linux-x64.tar.gz -O riscv.tgz
    tar zxf riscv.tgz
    mv xpack-riscv-none-embed-gcc-8.3.0-2.3 ~/riscv-embed-gcc
    ln -s ~/riscv-embed-gcc/bin/riscv-none-embed-as ~/riscv-embed-gcc/bin/riscv32-unknown-elf-as
    ln -s ~/riscv-embed-gcc/bin/riscv-none-embed-ar ~/riscv-embed-gcc/bin/riscv32-unknown-elf-ar
    ln -s ~/riscv-embed-gcc/bin/riscv-none-embed-gcc ~/riscv-embed-gcc/bin/riscv32-unknown-elf-gcc
    ln -s ~/riscv-embed-gcc/bin/riscv-none-embed-ld ~/riscv-embed-gcc/bin/riscv32-unknown-elf-ld
    ln -s ~/riscv-embed-gcc/bin/riscv-none-embed-objdump ~/riscv-embed-gcc/bin/riscv32-unknown-elf-objdump
    ln -s ~/riscv-embed-gcc/bin/riscv-none-embed-objcopy ~/riscv-embed-gcc/bin/riscv32-unknown-elf-objcopy

    # Update submodules
    git submodule update --init --recursive
  displayName: Prereqs
- script: sbt 'test'
  displayName: 'FlexPRET hardware unit tests'
- script: source env.bash && cmake -B build && cd build && make all install
  displayName: 'Generate verilog, emulator and install it to SDK'
- script: |
    # Set environment to find RISC-V compiler
    export RISCV_TOOL_PATH_PREFIX=~/riscv-embed-gcc
    source env.bash

    # Step into SDK and run tests
    cd sdk && cmake -B build && cd build && make && ctest
  displayName: 'Run C tests'
  
  # We did not run the two first as part of the script to make it easier to
  # debug issues with the job
- script: |
    # Set environment to find RISC-V compiler
    export RISCV_TOOL_PATH_PREFIX=~/riscv-embed-gcc
    source env.bash
    
    # Run multiple tests with script
    ./scripts/run_multiple_tests.sh
  displayName: 'Random name'
